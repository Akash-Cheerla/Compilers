%%
%name C
%term
	EOF 
  | INT | VOID
  | ID of string
  | CONST of int 
  | COMMA  | COLON   | SCOLON  | L_PAREN | R_PAREN | LBRACK | RBRACK 
  | L_BRACE| R_BRACE | DOT 
  | PLUS   | MINUS | MUL | DIV | MOD
  | ASSIGN | PLUS_ASSIGN | MINUS_ASSIGN | MUL_ASSIGN | DIV_ASSIGN | MOD_ASSIGN
  | NOT_OP | LT_OP | GT_OP
  | NE_OP  | LE_OP | GE_OP | EQ_OP
  | AND_OP | OR_OP
  | IF     | ELSE  | WHILE | FOR 
  | BREAK  | CONTINUE | RETURN





%nonterm  exp of Ast.expr
        | program of Ast.stmt list
	    | stmts of Ast.stmt list
	    | stmt of Ast.stmt
        | ass_exp of Ast.stmt
        | types of Ast.types
        | decs of Ast.stmt


%pos int
%verbose
%start program
%eop EOF
%noshift EOF



%keyword INT VOID IF ELSE WHILE FOR BREAK CONTINUE RETURN 

%prefer ELSE L_PAREN

%value CONST (1)

%nonassoc ELSE
%left NOT_OP
%left OR_OP
%left AND_OP
%left EQ_OP NE_OP
%left LT_OP GT_OP LE_OP GE_OP
%left PLUS MINUS
%left MUL DIV MOD
%right ASSIGN PLUS_ASSIGN MINUS_ASSIGN MUL_ASSIGN DIV_ASSIGN MOD_ASSIGN



%%


program     :    stmts        ( stmts )

stmts       :    stmt         ( [stmt] )
            |    stmt stmts   ( stmt :: stmts )

ass_exp     :    ID ASSIGN exp ( Ast.AssignC (Ast.Var ID, Ast.Assign, exp) )

types       :    INT          ( Ast.INT )

decs        :    types ID SCOLON    ( Ast.DeclC (types, Ast.Var ID, Ast.Const(0)) )
            |    types ID ASSIGN exp SCOLON ( Ast.DeclC (types, Ast.Var ID, exp) )

exp         :    ID                  ( Ast.ID (Ast.Var ID) )
            |    CONST               ( Ast.Const CONST )
            |    L_PAREN exp R_PAREN ( exp )
            |    exp PLUS exp        ( Ast.Binop (exp1, Ast.Plus, exp2) )
            |    exp MINUS exp       ( Ast.Binop (exp1, Ast.Minus, exp2) )
            |    exp MUL exp         ( Ast.Binop (exp1, Ast.Mul, exp2) )
            |    exp DIV exp         ( Ast.Binop (exp1, Ast.Div, exp2) )
            |    exp MOD exp         ( Ast.Binop (exp1, Ast.Mod, exp2) )
            |    exp NOT_OP exp	     ( Ast.Binop (exp1, Ast.Not_Op, exp2) )
            |    exp LT_OP exp       ( Ast.Binop (exp1, Ast.Lt_Op, exp2) )
            |    exp GT_OP exp       ( Ast.Binop (exp1, Ast.Gt_Op, exp2) )
            |    exp NE_OP exp       ( Ast.Binop (exp1, Ast.NE_Op, exp2) )
            |    exp LE_OP exp       ( Ast.Binop (exp1, Ast.LE_Op, exp2) )
            |    exp GE_OP exp	     ( Ast.Binop (exp1, Ast.GE_Op, exp2) )
            |    exp EQ_OP exp       ( Ast.Binop (exp1, Ast.Eq_Op, exp2) )
            |    exp AND_OP exp      ( Ast.Binop (exp1, Ast.And_Op, exp2) )
            |    exp OR_OP exp       ( Ast.Binop (exp1, Ast.Or_Op, exp2) ) 

stmt        :    decs            ( decs )
            |    ass_exp SCOLON  ( ass_exp )
            |    IF L_PAREN exp R_PAREN L_BRACE stmts R_BRACE    ( Ast.IF (exp, stmts) )
            |    IF L_PAREN exp R_PAREN L_BRACE stmts R_BRACE ELSE L_BRACE stmts R_BRACE  ( Ast.IF_ELSE (exp, stmts1, stmts2) )
            |    WHILE L_PAREN exp R_PAREN L_BRACE stmts R_BRACE ( Ast.WHILE (exp, stmts) )



